# Generated by Django 4.1 on 2024-01-01 07:57

import common.imgdiystorage
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.BooleanField(default=False, verbose_name='删除标记')),
                ('mobile', models.CharField(blank=True, default='', max_length=11, null=True, validators=[django.core.validators.RegexValidator(message='手机号码格式不正确，请输入有效的手机号码。', regex='^\\+?1?\\d{9,15}$')], verbose_name='手机号码')),
                ('gender', models.SmallIntegerField(choices=[(1, '男'), (2, '女')], default=1, verbose_name='性别')),
                ('avatar', models.ImageField(blank=True, default='avatars/default.jpg', null=True, upload_to='avatars/')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('address', models.CharField(blank=True, max_length=100, verbose_name='居住地')),
                ('avatar_url', models.URLField(blank=True, null=True, verbose_name='头像地址')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户表',
                'db_table': 'users_table',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='评论内容')),
                ('likes', models.PositiveIntegerField(default=0, verbose_name='点赞数量')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('is_delete', models.BooleanField(default=False, verbose_name='删除标记')),
            ],
            options={
                'verbose_name': '评论表',
                'db_table': 'comment_table',
            },
        ),
        migrations.CreateModel(
            name='Comment_Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='评论内容')),
                ('likes', models.PositiveIntegerField(default=0, verbose_name='点赞数量')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app01.comment', verbose_name='评论对象')),
                ('reply_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reply_user', to=settings.AUTH_USER_MODEL, verbose_name='被评论者')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='评论者')),
            ],
            options={
                'verbose_name': '评论回复表',
                'db_table': 'comment_reply_table',
            },
        ),
        migrations.CreateModel(
            name='Img',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.BooleanField(default=False, verbose_name='删除标记')),
                ('img', models.ImageField(default='images/default.png', upload_to='images/%Y/%m', verbose_name='图片')),
                ('desc', models.CharField(blank=True, max_length=100, verbose_name='图片描述')),
                ('url', models.CharField(blank=True, max_length=100, verbose_name='图片地址')),
                ('type', models.SmallIntegerField(choices=[(1, '用户头像'), (2, '标签图片'), (3, '用户中心背景图片')], default=1, verbose_name='图片类型')),
            ],
            options={
                'verbose_name': '图片表',
                'db_table': 'img_table',
            },
        ),
        migrations.CreateModel(
            name='Sidebar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='模块名称')),
                ('display_type', models.PositiveIntegerField(choices=[(1, '搜索'), (2, '最新文章'), (3, '最热文章'), (4, '最近评论'), (5, '文章归档'), (6, 'HTML')], default=1, verbose_name='展示类型')),
                ('content', models.CharField(blank=True, default='', help_text='如果设置的不是HTML类型，可为空', max_length=500, verbose_name='内容')),
                ('sort', models.PositiveIntegerField(default=1, help_text='序号越大越靠前', verbose_name='排序')),
                ('status', models.PositiveIntegerField(choices=[(1, '隐藏'), (2, '展示')], default=2, verbose_name='状态')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('place', models.PositiveIntegerField(choices=[(1, '主页'), (2, '文章详情页'), (3, '标签页')], default=1, verbose_name='展示位置')),
            ],
            options={
                'verbose_name': '侧边栏',
                'verbose_name_plural': '侧边栏',
                'ordering': ['-sort'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tagname', models.CharField(max_length=15, verbose_name='标签名')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('desc', models.TextField(default='', verbose_name='描述')),
                ('img', models.ImageField(blank=True, null=True, storage=common.imgdiystorage.FastDFSStorage, upload_to='', verbose_name='图片')),
            ],
            options={
                'verbose_name': '标签表',
                'db_table': 'Tag_table',
            },
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.BooleanField(default=False, verbose_name='删除标记')),
                ('title', models.CharField(max_length=100, verbose_name='文章标题')),
                ('desc', models.TextField(default='未填写描述', max_length=100, verbose_name='文章描述')),
                ('content', models.TextField(blank=True, default='在此处开始编写文章内容......', null=True, verbose_name='文章内容')),
                ('likes', models.PositiveIntegerField(default=0, verbose_name='点赞数')),
                ('comment_num', models.PositiveIntegerField(default=0, verbose_name='评论数量')),
                ('bv_code', models.CharField(default='待生成', max_length=12, verbose_name='BV编码')),
                ('color', models.SmallIntegerField(choices=[(1, '#56b8eb'), (2, '#f28033'), (3, '#ebc656'), (4, '#a2d148'), (5, '#20BFA4'), (6, '#7461c2'), (7, '#20bfa3')], default=1, verbose_name='颜色')),
                ('bucket', models.CharField(default='', max_length=100, verbose_name='存储桶')),
                ('region', models.CharField(default='', max_length=100, verbose_name='存储区域')),
                ('is_public', models.BooleanField(default=False, verbose_name='是否对外公开')),
                ('author', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='发表者')),
            ],
            options={
                'verbose_name': '文章表',
                'db_table': 'text_table',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nike_name', models.CharField(blank=True, max_length=50, verbose_name='昵称')),
                ('profile', models.TextField(default='这个人很懒，什么都没有留下', verbose_name='个人简介')),
                ('signature', models.TextField(blank=True, verbose_name='个性签名')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户中心表',
                'db_table': 'User_profile_form',
            },
        ),
        migrations.CreateModel(
            name='Text_cloud_Img',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon', models.PositiveIntegerField(default=0, verbose_name='图标类型')),
                ('img_name', models.CharField(default='', max_length=100, verbose_name='图片名')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.text', verbose_name='所属文章')),
            ],
        ),
        migrations.CreateModel(
            name='Tag_Text',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.text', verbose_name='文章')),
                ('tags', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.tag', verbose_name='标签名')),
            ],
            options={
                'verbose_name': '文章标签表',
                'db_table': 'tag_article_table',
            },
        ),
        migrations.CreateModel(
            name='Like_Text',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.text', verbose_name='文章')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='点赞用户')),
            ],
            options={
                'verbose_name': '文章点赞表',
                'db_table': 'like_text_table',
            },
        ),
        migrations.CreateModel(
            name='Like_Comment_Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.comment_reply', verbose_name='评论')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='点赞用户')),
            ],
            options={
                'verbose_name': '评论回复点赞表',
                'db_table': 'comment_reply_like_table',
            },
        ),
        migrations.CreateModel(
            name='Like_Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.comment', verbose_name='评论')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='点赞用户')),
            ],
            options={
                'verbose_name': '评论点赞表',
                'db_table': 'comment_like_table',
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='text',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app01.text', verbose_name='所属文章'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='评论者'),
        ),
    ]
